--- linux-6.1.86-b/drivers/mtd/nand/raw/gpio.c	2024-04-13 23:05:29.000000000 +1200
+++ linux-6.1.86-a/drivers/mtd/nand/raw/gpio.c	2024-04-24 19:59:12.243622049 +1200
@@ -27,6 +27,10 @@
 #include <linux/of_address.h>
 #include <linux/delay.h>
 
+static int packets=0;
+static int wpackets=0;
+static int zeropackets=0;
+
 struct gpiomtd {
 	struct nand_controller	base;
 	void __iomem		*io;
@@ -77,40 +81,59 @@
 {
 	struct gpiomtd *gpiomtd = gpio_nand_getpriv(nand_to_mtd(chip));
 	unsigned int i;
+	int checksum=0;
 
 	switch (instr->type) {
 	case NAND_OP_CMD_INSTR:
 		gpio_nand_dosync(gpiomtd);
 		gpiod_set_value(gpiomtd->cle, 1);
 		gpio_nand_dosync(gpiomtd);
+		ndelay(200);
 		writeb(instr->ctx.cmd.opcode, gpiomtd->io);
+		ndelay(200);
 		gpio_nand_dosync(gpiomtd);
 		gpiod_set_value(gpiomtd->cle, 0);
+		gpio_nand_dosync(gpiomtd);
+		ndelay(200);
 		return 0;
 
 	case NAND_OP_ADDR_INSTR:
 		gpio_nand_dosync(gpiomtd);
 		gpiod_set_value(gpiomtd->ale, 1);
 		gpio_nand_dosync(gpiomtd);
+		ndelay(200);
 		for (i = 0; i < instr->ctx.addr.naddrs; i++)
 			writeb(instr->ctx.addr.addrs[i], gpiomtd->io);
 		gpio_nand_dosync(gpiomtd);
+		ndelay(200);
+		ndelay(200);
+		ndelay(200);
 		gpiod_set_value(gpiomtd->ale, 0);
+		ndelay(200);
 		return 0;
 
 	case NAND_OP_DATA_IN_INSTR:
 		gpio_nand_dosync(gpiomtd);
+		ndelay(200);
 		if ((chip->options & NAND_BUSWIDTH_16) &&
 		    !instr->ctx.data.force_8bit)
 			ioread16_rep(gpiomtd->io, instr->ctx.data.buf.in,
 				     instr->ctx.data.len / 2);
 		else
+			{
 			ioread8_rep(gpiomtd->io, instr->ctx.data.buf.in,
 				    instr->ctx.data.len);
+			for(i=0;i<instr->ctx.data.len; i++)
+				checksum+= ( ( char * ) instr->ctx.data.buf.in)[i];
+			packets++;
+			if (!checksum ) zeropackets++;
+			}
+		ndelay(200);
 		return 0;
 
 	case NAND_OP_DATA_OUT_INSTR:
 		gpio_nand_dosync(gpiomtd);
+		ndelay(200);
 		if ((chip->options & NAND_BUSWIDTH_16) &&
 		    !instr->ctx.data.force_8bit)
 			iowrite16_rep(gpiomtd->io, instr->ctx.data.buf.out,
@@ -118,12 +141,16 @@
 		else
 			iowrite8_rep(gpiomtd->io, instr->ctx.data.buf.out,
 				     instr->ctx.data.len);
+		wpackets++;
+		ndelay(200);
 		return 0;
 
 	case NAND_OP_WAITRDY_INSTR:
-		if (!gpiomtd->rdy)
+		ndelay(200);
+		ndelay(200);
+		if (!gpiomtd->rdy) {
 			return nand_soft_waitrdy(chip, instr->ctx.waitrdy.timeout_ms);
-
+		}
 		return nand_gpio_waitrdy(chip, gpiomtd->rdy,
 					 instr->ctx.waitrdy.timeout_ms);
 
@@ -152,8 +179,7 @@
 		if (ret)
 			break;
 
-		if (op->instrs[i].delay_ns)
-			ndelay(op->instrs[i].delay_ns);
+		ndelay(200);
 	}
 	gpio_nand_dosync(gpiomtd);
 	gpiod_set_value(gpiomtd->nce, 1);
@@ -289,11 +315,10 @@
 	struct gpiomtd *gpiomtd;
 	struct nand_chip *chip;
 	struct mtd_info *mtd;
-	struct resource *res;
 	struct device *dev = &pdev->dev;
 	int ret = 0;
 
-	if (!dev->of_node && !dev_get_platdata(dev))
+	if (!dev->of_node )
 		return -EINVAL;
 
 	gpiomtd = devm_kzalloc(dev, sizeof(*gpiomtd), GFP_KERNEL);
@@ -306,12 +331,7 @@
 	if (IS_ERR(gpiomtd->io))
 		return PTR_ERR(gpiomtd->io);
 
-	res = gpio_nand_get_io_sync(pdev);
-	if (res) {
-		gpiomtd->io_sync = devm_ioremap_resource(dev, res);
-		if (IS_ERR(gpiomtd->io_sync))
-			return PTR_ERR(gpiomtd->io_sync);
-	}
+	gpiomtd->io_sync = kmalloc(4,GFP_KERNEL);
 
 	ret = gpio_nand_get_config(dev, &gpiomtd->plat);
 	if (ret)
